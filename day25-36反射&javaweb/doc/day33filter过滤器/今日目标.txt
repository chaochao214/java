1.过滤器的入门
  1.写一个ServletDemo01，没有过滤器的时候访问
  2.编写一个过滤器，指定其映射路径过滤上面的Servlet，再访问Servlet
	2.1 写一个类，实现Filter接口，实现它里面的三个方法，并且在doFilter()方法中打印
	2.2 配置注解，WebFilter("/demo01")
	
2.过滤器的生命周期的演示(选做)
  重写init()、destory()方法
  
3.映射路径的演示
	1. 演示精确匹配，指定一个过滤器只过滤ServletDemo01不过滤ServletDemo02
	2. 演示"/*",无论访问那个Servlet都会经过过滤器
	3. 演示"*.jsp",只有访问jsp的时候，才会经过过滤器

4.做一个最简单的过滤器的案例，统一解决全站乱码问题
	1. 没有过滤器的情况，自己在Servlet中解决请求和响应乱码
	2. 添加过滤器在过滤器中，再来解决请求和响应乱码，然后将Servlet中解决乱码的代码删除、看效果
	

5. 非法字符过滤的案例
   1. 没有过滤器的情况
   2. 添加一个过滤器，但是非法字符写死为某一个
   3. 优化:使用文件存放非法字符
   
选做的案例
登录权限的校验
1. 编写一个过滤器，过滤所有资源
2. 在过滤器放行之前进行判断
	1. 当前未登录
		session中获取user，如果user为空则未登录
	2. 当前访问的请求资源跟购物车相关
		request.getRequestURI(),判断uri中包含"car"就代表该次请求和购物车相关
3. 满足了上述俩条件之后，那么则跳转到登录页面，并且return

	如果不是同属满足上述俩条件，则直接放行
	
自动登录
1. 在Servlet中获取"aotu"
2. 在登录成功的时候，判断如果"on".equals(auto)则表示需要自动登录
	将用户名和密码使用cookie技术存放到客户端
	
3. 编写一个Filter过滤器，在过滤器中判断,如果当前未登录
	则从cookie中取出用户名和密码，并且调用业务层的方法进行登录
	然后将user存放到session中，然后放行
	
	如果当前已登录，则直接放行
	
	

1.mysql,jdbcTemplate,连接池
2.前端的内容HTML,js
3.Http协议、Tomcat、Servlet、request、response、session、cookie、jsp、el、jstl
4.Filter



   


   
   
   

  
