案例一:添加联系人信息
1. 客户端通过表单项服务器提交联系人信息
2. Servlet获取所有的联系人信息，并且使用BeanUtils将所有联系人信息封装到Contact对象中
3. 调用service的方法存储联系人信息
4. service中调用dao层的方法，将联系人信息存放到数据库
5. 在Servlet中，判断如果添加成功，就使用重定向跳转到ShowAllServlet重新查看所有联系人信息


案例二:删除联系人信息
1. 客户端发送请求到Servlet并且携带要删除的联系人的id
2. Servlet获取要删除的联系人的id
3. 调用service的方法删除联系人信息
4. service中调用dao层的方法，根据id删除联系人
5. 在Servlet中，判断如果删除成功，就使用重定向跳转到ShowAllServlet重新查看所有


案例三:数据回显/根据id查询并且显示单个联系人的信息
1. 客户端发送请求到Servlet，携带联系人的id
2. Servlet获取联系人的id
3. Servlet调用service层的方法，根据id查询联系人信息
4. 在service中调用dao层的方法，根据id查询联系人信息
5. 在Servlet将联系人信息存放到域对象
6. 跳转到update.jsp显示联系人信息


案例四:修改联系人信息
1. 客户端通过表单，将修改后的数据传递到Servlet
2. Servlet获取所有的请求参数，并且将其封装到contact对象
3. 调用service层的方法，修改联系人信息
4. 在service中调用dao层的方法，修改联系人信息
5. 修改完成之后，如果修改成功，则在Servlet中跳转到ShowAllServlet查看所有的联系人信息

案例五:分页案例
1. 封装PageBean类，它里面所封装的属性就是展示分页页面需要的数据
	1. 当前页的数据集合
	2. 当前页数
	3. 每页的数据条数
	4. 总数据条数
	5. 总页数
	
2. 客户端向服务器发送查询分页数据的请求，并且携带currentPage参数

3. 服务器接收到currentPage，并且调用service层的方法，根据currentPage来封装PageBean对象
	1. 创建PageBean对象
	2. 设置currentPage
	3. 设置pageSize，每页的数据条数
	4. 设置总数据条数，调用dao层的方法，获取总数据条数
	5. 设置总页数，计算出总页数
	6. 设置每页的数据集合，调用dao层的方法，使用limit关键字进行查询
	
4. 在Servlet中，将PageBean存放到域对象中

5. 跳转到page.jsp展示分页信息


